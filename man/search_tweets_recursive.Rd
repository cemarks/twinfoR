% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api_recursives.R
\name{search_tweets_recursive}
\alias{search_tweets_recursive}
\title{Recursive Twitter Search}
\usage{
search_tweets_recursive(q, data.connection, authentication.vector,
  geocode = NULL, lang = NULL, locale = NULL,
  result_type = "recent", until = NULL, since_id = NULL,
  max_id = NULL, include_entities = TRUE, tweet_mode = "extended",
  query.row.id = NULL, ...)
}
\arguments{
\item{q}{character search query string.}

\item{data.connection}{a DBI connection to an RSQLite \code{\link{twitter_database}}.}

\item{authentication.vector}{character vector containing authentication tokens and secrets.
See \code{\link{authorize_app}} and \code{\link{authorize_IT}}.}

\item{geocode}{character string of the form "latitude,longitude,radius".  Note that this functionality
does not always work well and can severely limit the number of tweets returned.}

\item{lang}{character language abbreviation to limit results.  The correct abbreviation must be used, e.g.,
'en' for English or 'es' for Spanish.  Not all langauges are supported, and some Tweets are not correctly
labeled.}

\item{locale}{character specification of the language of the query.  The default (\code{NULL}) should work
in most cases.}

\item{result_type}{character from \code{c("mixed","recent","popular")}, indicating which algorithm
Twitter will use to determine which statuses to return.}

\item{until}{character date string formated as 'YYYY-MM-DD'.  If supplied, only tweets *before* this date
will be returned.}

\item{since_id}{numeric or character status_id.  If supplied, only tweets with status_ids greater
than this value (and therefore more recent) will be returned.}

\item{max_id}{numeric or character status_id.  If suppled, only tweets with status_ids less than or
equal to this value (and therefore no more recent) will be returned.}

\item{include_entities}{logical indicating whether the status entities
(e.g., urls, hashtags, usermentions, media) will be included in the results.}

\item{tweet_mode}{character either 'extended' for full_text statuses or 'compat' for
140 character compatability.}

\item{query.row.id}{integer row \code{id} of the query in the \code{query_text} table.  This
value is inserted into the \code{search_status} table.  Ignored if no \code{data.connection}
provided.  See \code{\link{twitter_database}}.}

\item{...}{other named parameters passed to \code{\link{insert_statuses}}.}
}
\value{
character most recent status id collected if \code{data.connection} is supplied,
otherwise a list of status objects (lists).
}
\description{
Call the Twitter Search API recursively
}
\details{
This function recursively searches the Twitter API from most recent results to less
recent results until no tweets are returned.  Each query includes a five-second
delay in order to prevent exceeding the API rate limit.  Optionally, this function
inputs a function to call that takes the resulting status list as an argument.  This
function can be anything, but is intended to be a function that writes the statuses to
a data connection.

If the \code{authentication.vector} parameter is missing, this method checks the global
environment for \code{auth.vector}.  If this variable exists, the function will use
this variable as the \code{authentication.vector}.  If this variable does not exist, the
function will throw an error.
}
\examples{

\dontrun{
auth.vector <- load("auth-vector.RData")
query <- "Miami"
statuses <- search_tweets_recursive(
  query,
  authentication.vector = auth.vector
)
}
}
\seealso{
\code{\link{search_tweets}}, \code{\link{insert_statuses}}, \code{\link{twitter_database}}
}
