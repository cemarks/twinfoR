% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api_recursives.R
\name{status_lookup_recursive}
\alias{status_lookup_recursive}
\title{Recursive Status Lookup}
\usage{
status_lookup_recursive(status_id, data.connection, authentication.vector,
  include_entities = TRUE, trim_user = FALSE, map = NULL,
  include_ext_alt_text = NULL, include_card_uri = NULL,
  tweet_mode = "extended", ...)
}
\arguments{
\item{status_id}{numeric or character vector of up to 100 status_ids.}

\item{data.connection}{a DBI connection to an RSQLite \code{\link{twitter_database}}.}

\item{authentication.vector}{character vector containing authentication tokens and secrets.
See \code{\link{authorize_app}} and \code{\link{authorize_IT}}.}

\item{include_entities}{logical indicating whether to include profile entities (e.g., urls)
as separate nodes in the returned json object.}

\item{trim_user}{logical indicating whether to remove the user object from each status.}

\item{map}{logical indicating whether to return status_ids with NULL values if they do not
exist or cannot be viewed by the authenticated user.}

\item{include_ext_alt_text}{logical indicating whether to return "alt" text assigned to any
attached media entities.}

\item{include_card_uri}{logical indicating whether to include a \code{card_uni} attribute with each
tweet when there is an ad attached to the tweet using the \code{card_uni} value.}

\item{tweet_mode}{character either 'extended' for full_text statuses or 'compat' for
140 character compatability.}

\item{...}{other named parameters passed to \code{\link{insert_statuses}}.}
}
\value{
\code{NULL} if \code{data.connection} is supplied, otherwise a list of status objects.
}
\description{
Recursively call the status lookup API
}
\details{
This function recursively calls the statuses/lookup endpoint (see
\href{https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-lookup}{Status Lookup API Documentation}).
This is useful for lists of more than 100 status_ids.  For no more than 100 statuses, the
\code{\link{status_lookup}} function is preferred.  This method
includes a one second delay for each query in order to prevent exceeding the rate limit.

If the \code{authentication.vector} parameter is missing, this method checks the global
environment for \code{auth.vector}.  If this variable exists, the function will use
this variable as the \code{authentication.vector}.  If this variable does not exist, the
function will throw an error.
}
\examples{

## Not run: authenticate
# auth.vector <- authorize_IT()

original.statuses <- user_timeline_recursive("realDonaldTrump")
status.ids <- sapply(original.statuses,function(x) return(x$id_str))

new.statuses <- status_lookup_recursive(
  status.ids,
  authentication.vector <- auth.vector
)

cat(new.statuses[[1]]$full_text)

}
\seealso{
\code{\link{status_lookup}}, \code{\link{insert_statuses}}
}
