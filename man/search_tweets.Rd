% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api_calls.R
\name{search_tweets}
\alias{search_tweets}
\title{Search Twitter}
\usage{
search_tweets(q, authentication.vector, geocode = NULL, lang = NULL,
  locale = NULL, result_type = "recent", count = 100, until = NULL,
  since_id = NULL, max_id = NULL, include_entities = TRUE,
  tweet_mode = "extended")
}
\arguments{
\item{q}{character search query string.}

\item{authentication.vector}{character vector containing authentication tokens and secrets.
See \code{\link{authorize_app}} and \code{\link{authorize_IT}}.}

\item{geocode}{character string of the form "latitude,longitude,radius".  Note that this functionality
does not always work well and can severely limit the number of tweets returned.}

\item{lang}{character language abbreviation to limit results.  The correct abbreviation must be used, e.g.,
'en' for English or 'es' for Spanish.  Not all langauges are supported, and some Tweets are not correctly
labeled.}

\item{locale}{character specification of the language of the query.  The default (\code{NULL}) should work
in most cases.}

\item{result_type}{character from \code{c("mixed","recent","popular")}, indicating which algorithm
Twitter will use to determine which statuses to return.}

\item{count}{numeric number of tweets to return per page, up to a maximum of 100.}

\item{until}{character date string formated as 'YYYY-MM-DD'.  If supplied, only tweets *before* this date
will be returned.}

\item{since_id}{numeric or character status_id.  If supplied, only tweets with status_ids greater
than this value (and therefore more recent) will be returned.}

\item{max_id}{numeric or character status_id.  If suppled, only tweets with status_ids less than or
equal to this value (and therefore no more recent) will be returned.}

\item{include_entities}{logical indicating whether the status entities
(e.g., urls, hashtags, usermentions, media) will be included in the results.}

\item{tweet_mode}{character either 'extended' for full_text statuses or 'compat' for
140 character compatability.}
}
\value{
On success, an R list representation of the returned JSON object.  On failure, a warning
is thrown and the http response is returned, if any.
}
\description{
Access Twitter Statuses Using the Search API
}
\details{
This function calls \code{\link{twitter_request}} using the Twitter
standard search endpoint (see
\href{https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets}{Search API Documentation}).
A query string (\code{q}) is required.  If an authentication vector is not
provided and there is no globally defined \code{auth.vector}, an error is returned.
}
\examples{

\dontrun{
auth.vector <- authorize_IT()

search.json <- search_tweets(
  "#myfirsttweet",
  auth.vector
)

cat(json.list$statuses[[1]]$full_text)
}
}
\seealso{
\code{\link{twitter_request}}, \code{\link{authorize_app}}
}
